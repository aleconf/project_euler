#!/usr/bin/env python


prime_dict: dict[int, str] = dict()


def prime_sieve(n: int) -> list[int]:
    """Find all primes <= N using the sieve of Eratosthenes."""
    primes = [1 for _ in range(n + 1)]
    for i in range(4, n + 1, 2):
        primes[i] = 0
    for i in range(3, int(n**0.5) + 1, 2):
        if primes[i] == 1:
            for j in range(i * i, n + 1, i):
                primes[j] = 0
    result = list()
    for i in range(2, n + 1):
        if primes[i] == 1:
            result.append(i)
    return result


def primality_test(n: int) -> bool:
    """Check if a number is prime."""
    if n in prime_dict:
        return True
    if max(prime_dict) < n**0.5:
        new_primes = prime_sieve(int(n**0.5))
        for prime in new_primes:
            prime_dict[prime] = ""

    for prime in prime_dict:
        if n % prime == 0:
            return False
    # If n is prime do not add n to prime_dict
    # because there might be other primes between max(prime_dict) and n.
    return True


def check_polynomial(a: int, b: int) -> int:
    """Compute the number of consecutive primes generated by the polynomial with these two coefficients."""
    n = 0
    while True:
        aux = n * n + a * n + b
        if aux > 0 and primality_test(n * n + a * n + b):
            n += 1
        else:
            break
    return n


def solver() -> int:
    """Main solver of the task.

    $n^2 + an + b$ must be prime for n=0 hence b must be prime.
    Likewise, $n^2 + an + b$ must be prime for n=1 hence
    a = p − b − 1 for some primes b and p.
    """

    primes = prime_sieve(1000)
    for prime in primes:
        prime_dict[prime] = ""
    a_candidates = [x - y - 1 for x in primes for y in primes]

    max_generated = 0
    result = 0
    for a in a_candidates:
        for b in primes:
            aux = check_polynomial(a, b)
            if max_generated < aux:
                max_generated = aux
                result = a * b
    return result


def main() -> None:
    """Print the solution."""
    print(solver())


if __name__ == "__main__":
    main()
